// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package create_reminder_command_mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_create_reminder_command "github.com/Roum1212/todo/internal/app/command/create-reminder"
	"github.com/gojuno/minimock/v3"
)

// CommandHandlerMock implements mm_create_reminder_command.CommandHandler
type CommandHandlerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcHandleCommand          func(ctx context.Context, command mm_create_reminder_command.Command) (err error)
	funcHandleCommandOrigin    string
	inspectFuncHandleCommand   func(ctx context.Context, command mm_create_reminder_command.Command)
	afterHandleCommandCounter  uint64
	beforeHandleCommandCounter uint64
	HandleCommandMock          mCommandHandlerMockHandleCommand
}

// NewCommandHandlerMock returns a mock for mm_create_reminder_command.CommandHandler
func NewCommandHandlerMock(t minimock.Tester) *CommandHandlerMock {
	m := &CommandHandlerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HandleCommandMock = mCommandHandlerMockHandleCommand{mock: m}
	m.HandleCommandMock.callArgs = []*CommandHandlerMockHandleCommandParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCommandHandlerMockHandleCommand struct {
	optional           bool
	mock               *CommandHandlerMock
	defaultExpectation *CommandHandlerMockHandleCommandExpectation
	expectations       []*CommandHandlerMockHandleCommandExpectation

	callArgs []*CommandHandlerMockHandleCommandParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommandHandlerMockHandleCommandExpectation specifies expectation struct of the CommandHandler.HandleCommand
type CommandHandlerMockHandleCommandExpectation struct {
	mock               *CommandHandlerMock
	params             *CommandHandlerMockHandleCommandParams
	paramPtrs          *CommandHandlerMockHandleCommandParamPtrs
	expectationOrigins CommandHandlerMockHandleCommandExpectationOrigins
	results            *CommandHandlerMockHandleCommandResults
	returnOrigin       string
	Counter            uint64
}

// CommandHandlerMockHandleCommandParams contains parameters of the CommandHandler.HandleCommand
type CommandHandlerMockHandleCommandParams struct {
	ctx     context.Context
	command mm_create_reminder_command.Command
}

// CommandHandlerMockHandleCommandParamPtrs contains pointers to parameters of the CommandHandler.HandleCommand
type CommandHandlerMockHandleCommandParamPtrs struct {
	ctx     *context.Context
	command *mm_create_reminder_command.Command
}

// CommandHandlerMockHandleCommandResults contains results of the CommandHandler.HandleCommand
type CommandHandlerMockHandleCommandResults struct {
	err error
}

// CommandHandlerMockHandleCommandOrigins contains origins of expectations of the CommandHandler.HandleCommand
type CommandHandlerMockHandleCommandExpectationOrigins struct {
	origin        string
	originCtx     string
	originCommand string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Optional() *mCommandHandlerMockHandleCommand {
	mmHandleCommand.optional = true
	return mmHandleCommand
}

// Expect sets up expected params for CommandHandler.HandleCommand
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Expect(ctx context.Context, command mm_create_reminder_command.Command) *mCommandHandlerMockHandleCommand {
	if mmHandleCommand.mock.funcHandleCommand != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Set")
	}

	if mmHandleCommand.defaultExpectation == nil {
		mmHandleCommand.defaultExpectation = &CommandHandlerMockHandleCommandExpectation{}
	}

	if mmHandleCommand.defaultExpectation.paramPtrs != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by ExpectParams functions")
	}

	mmHandleCommand.defaultExpectation.params = &CommandHandlerMockHandleCommandParams{ctx, command}
	mmHandleCommand.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHandleCommand.expectations {
		if minimock.Equal(e.params, mmHandleCommand.defaultExpectation.params) {
			mmHandleCommand.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHandleCommand.defaultExpectation.params)
		}
	}

	return mmHandleCommand
}

// ExpectCtxParam1 sets up expected param ctx for CommandHandler.HandleCommand
func (mmHandleCommand *mCommandHandlerMockHandleCommand) ExpectCtxParam1(ctx context.Context) *mCommandHandlerMockHandleCommand {
	if mmHandleCommand.mock.funcHandleCommand != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Set")
	}

	if mmHandleCommand.defaultExpectation == nil {
		mmHandleCommand.defaultExpectation = &CommandHandlerMockHandleCommandExpectation{}
	}

	if mmHandleCommand.defaultExpectation.params != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Expect")
	}

	if mmHandleCommand.defaultExpectation.paramPtrs == nil {
		mmHandleCommand.defaultExpectation.paramPtrs = &CommandHandlerMockHandleCommandParamPtrs{}
	}
	mmHandleCommand.defaultExpectation.paramPtrs.ctx = &ctx
	mmHandleCommand.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmHandleCommand
}

// ExpectCommandParam2 sets up expected param command for CommandHandler.HandleCommand
func (mmHandleCommand *mCommandHandlerMockHandleCommand) ExpectCommandParam2(command mm_create_reminder_command.Command) *mCommandHandlerMockHandleCommand {
	if mmHandleCommand.mock.funcHandleCommand != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Set")
	}

	if mmHandleCommand.defaultExpectation == nil {
		mmHandleCommand.defaultExpectation = &CommandHandlerMockHandleCommandExpectation{}
	}

	if mmHandleCommand.defaultExpectation.params != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Expect")
	}

	if mmHandleCommand.defaultExpectation.paramPtrs == nil {
		mmHandleCommand.defaultExpectation.paramPtrs = &CommandHandlerMockHandleCommandParamPtrs{}
	}
	mmHandleCommand.defaultExpectation.paramPtrs.command = &command
	mmHandleCommand.defaultExpectation.expectationOrigins.originCommand = minimock.CallerInfo(1)

	return mmHandleCommand
}

// Inspect accepts an inspector function that has same arguments as the CommandHandler.HandleCommand
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Inspect(f func(ctx context.Context, command mm_create_reminder_command.Command)) *mCommandHandlerMockHandleCommand {
	if mmHandleCommand.mock.inspectFuncHandleCommand != nil {
		mmHandleCommand.mock.t.Fatalf("Inspect function is already set for CommandHandlerMock.HandleCommand")
	}

	mmHandleCommand.mock.inspectFuncHandleCommand = f

	return mmHandleCommand
}

// Return sets up results that will be returned by CommandHandler.HandleCommand
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Return(err error) *CommandHandlerMock {
	if mmHandleCommand.mock.funcHandleCommand != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Set")
	}

	if mmHandleCommand.defaultExpectation == nil {
		mmHandleCommand.defaultExpectation = &CommandHandlerMockHandleCommandExpectation{mock: mmHandleCommand.mock}
	}
	mmHandleCommand.defaultExpectation.results = &CommandHandlerMockHandleCommandResults{err}
	mmHandleCommand.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHandleCommand.mock
}

// Set uses given function f to mock the CommandHandler.HandleCommand method
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Set(f func(ctx context.Context, command mm_create_reminder_command.Command) (err error)) *CommandHandlerMock {
	if mmHandleCommand.defaultExpectation != nil {
		mmHandleCommand.mock.t.Fatalf("Default expectation is already set for the CommandHandler.HandleCommand method")
	}

	if len(mmHandleCommand.expectations) > 0 {
		mmHandleCommand.mock.t.Fatalf("Some expectations are already set for the CommandHandler.HandleCommand method")
	}

	mmHandleCommand.mock.funcHandleCommand = f
	mmHandleCommand.mock.funcHandleCommandOrigin = minimock.CallerInfo(1)
	return mmHandleCommand.mock
}

// When sets expectation for the CommandHandler.HandleCommand which will trigger the result defined by the following
// Then helper
func (mmHandleCommand *mCommandHandlerMockHandleCommand) When(ctx context.Context, command mm_create_reminder_command.Command) *CommandHandlerMockHandleCommandExpectation {
	if mmHandleCommand.mock.funcHandleCommand != nil {
		mmHandleCommand.mock.t.Fatalf("CommandHandlerMock.HandleCommand mock is already set by Set")
	}

	expectation := &CommandHandlerMockHandleCommandExpectation{
		mock:               mmHandleCommand.mock,
		params:             &CommandHandlerMockHandleCommandParams{ctx, command},
		expectationOrigins: CommandHandlerMockHandleCommandExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHandleCommand.expectations = append(mmHandleCommand.expectations, expectation)
	return expectation
}

// Then sets up CommandHandler.HandleCommand return parameters for the expectation previously defined by the When method
func (e *CommandHandlerMockHandleCommandExpectation) Then(err error) *CommandHandlerMock {
	e.results = &CommandHandlerMockHandleCommandResults{err}
	return e.mock
}

// Times sets number of times CommandHandler.HandleCommand should be invoked
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Times(n uint64) *mCommandHandlerMockHandleCommand {
	if n == 0 {
		mmHandleCommand.mock.t.Fatalf("Times of CommandHandlerMock.HandleCommand mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHandleCommand.expectedInvocations, n)
	mmHandleCommand.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHandleCommand
}

func (mmHandleCommand *mCommandHandlerMockHandleCommand) invocationsDone() bool {
	if len(mmHandleCommand.expectations) == 0 && mmHandleCommand.defaultExpectation == nil && mmHandleCommand.mock.funcHandleCommand == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHandleCommand.mock.afterHandleCommandCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHandleCommand.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// HandleCommand implements mm_create_reminder_command.CommandHandler
func (mmHandleCommand *CommandHandlerMock) HandleCommand(ctx context.Context, command mm_create_reminder_command.Command) (err error) {
	mm_atomic.AddUint64(&mmHandleCommand.beforeHandleCommandCounter, 1)
	defer mm_atomic.AddUint64(&mmHandleCommand.afterHandleCommandCounter, 1)

	mmHandleCommand.t.Helper()

	if mmHandleCommand.inspectFuncHandleCommand != nil {
		mmHandleCommand.inspectFuncHandleCommand(ctx, command)
	}

	mm_params := CommandHandlerMockHandleCommandParams{ctx, command}

	// Record call args
	mmHandleCommand.HandleCommandMock.mutex.Lock()
	mmHandleCommand.HandleCommandMock.callArgs = append(mmHandleCommand.HandleCommandMock.callArgs, &mm_params)
	mmHandleCommand.HandleCommandMock.mutex.Unlock()

	for _, e := range mmHandleCommand.HandleCommandMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmHandleCommand.HandleCommandMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHandleCommand.HandleCommandMock.defaultExpectation.Counter, 1)
		mm_want := mmHandleCommand.HandleCommandMock.defaultExpectation.params
		mm_want_ptrs := mmHandleCommand.HandleCommandMock.defaultExpectation.paramPtrs

		mm_got := CommandHandlerMockHandleCommandParams{ctx, command}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmHandleCommand.t.Errorf("CommandHandlerMock.HandleCommand got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHandleCommand.HandleCommandMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.command != nil && !minimock.Equal(*mm_want_ptrs.command, mm_got.command) {
				mmHandleCommand.t.Errorf("CommandHandlerMock.HandleCommand got unexpected parameter command, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHandleCommand.HandleCommandMock.defaultExpectation.expectationOrigins.originCommand, *mm_want_ptrs.command, mm_got.command, minimock.Diff(*mm_want_ptrs.command, mm_got.command))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHandleCommand.t.Errorf("CommandHandlerMock.HandleCommand got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHandleCommand.HandleCommandMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHandleCommand.HandleCommandMock.defaultExpectation.results
		if mm_results == nil {
			mmHandleCommand.t.Fatal("No results are set for the CommandHandlerMock.HandleCommand")
		}
		return (*mm_results).err
	}
	if mmHandleCommand.funcHandleCommand != nil {
		return mmHandleCommand.funcHandleCommand(ctx, command)
	}
	mmHandleCommand.t.Fatalf("Unexpected call to CommandHandlerMock.HandleCommand. %v %v", ctx, command)
	return
}

// HandleCommandAfterCounter returns a count of finished CommandHandlerMock.HandleCommand invocations
func (mmHandleCommand *CommandHandlerMock) HandleCommandAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleCommand.afterHandleCommandCounter)
}

// HandleCommandBeforeCounter returns a count of CommandHandlerMock.HandleCommand invocations
func (mmHandleCommand *CommandHandlerMock) HandleCommandBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleCommand.beforeHandleCommandCounter)
}

// Calls returns a list of arguments used in each call to CommandHandlerMock.HandleCommand.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHandleCommand *mCommandHandlerMockHandleCommand) Calls() []*CommandHandlerMockHandleCommandParams {
	mmHandleCommand.mutex.RLock()

	argCopy := make([]*CommandHandlerMockHandleCommandParams, len(mmHandleCommand.callArgs))
	copy(argCopy, mmHandleCommand.callArgs)

	mmHandleCommand.mutex.RUnlock()

	return argCopy
}

// MinimockHandleCommandDone returns true if the count of the HandleCommand invocations corresponds
// the number of defined expectations
func (m *CommandHandlerMock) MinimockHandleCommandDone() bool {
	if m.HandleCommandMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HandleCommandMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HandleCommandMock.invocationsDone()
}

// MinimockHandleCommandInspect logs each unmet expectation
func (m *CommandHandlerMock) MinimockHandleCommandInspect() {
	for _, e := range m.HandleCommandMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommandHandlerMock.HandleCommand at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHandleCommandCounter := mm_atomic.LoadUint64(&m.afterHandleCommandCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HandleCommandMock.defaultExpectation != nil && afterHandleCommandCounter < 1 {
		if m.HandleCommandMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommandHandlerMock.HandleCommand at\n%s", m.HandleCommandMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommandHandlerMock.HandleCommand at\n%s with params: %#v", m.HandleCommandMock.defaultExpectation.expectationOrigins.origin, *m.HandleCommandMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleCommand != nil && afterHandleCommandCounter < 1 {
		m.t.Errorf("Expected call to CommandHandlerMock.HandleCommand at\n%s", m.funcHandleCommandOrigin)
	}

	if !m.HandleCommandMock.invocationsDone() && afterHandleCommandCounter > 0 {
		m.t.Errorf("Expected %d calls to CommandHandlerMock.HandleCommand at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HandleCommandMock.expectedInvocations), m.HandleCommandMock.expectedInvocationsOrigin, afterHandleCommandCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommandHandlerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockHandleCommandInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommandHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommandHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHandleCommandDone()
}

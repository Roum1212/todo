// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/Roum1212/todo/internal/app/query/get-reminder-by-id.QueryHandler -o query_handler_mock.go -n QueryHandlerMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_get_reminder_by_id_query "github.com/Roum1212/todo/internal/app/query/get-reminder-by-id"
	reminder_aggregate "github.com/Roum1212/todo/internal/domain/aggregate/reminder"
	"github.com/gojuno/minimock/v3"
)

// QueryHandlerMock implements mm_get_reminder_by_id_query.QueryHandler
type QueryHandlerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcHandleQuery          func(ctx context.Context, q mm_get_reminder_by_id_query.Query) (r1 reminder_aggregate.Reminder, err error)
	funcHandleQueryOrigin    string
	inspectFuncHandleQuery   func(ctx context.Context, q mm_get_reminder_by_id_query.Query)
	afterHandleQueryCounter  uint64
	beforeHandleQueryCounter uint64
	HandleQueryMock          mQueryHandlerMockHandleQuery
}

// NewQueryHandlerMock returns a mock for mm_get_reminder_by_id_query.QueryHandler
func NewQueryHandlerMock(t minimock.Tester) *QueryHandlerMock {
	m := &QueryHandlerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HandleQueryMock = mQueryHandlerMockHandleQuery{mock: m}
	m.HandleQueryMock.callArgs = []*QueryHandlerMockHandleQueryParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mQueryHandlerMockHandleQuery struct {
	optional           bool
	mock               *QueryHandlerMock
	defaultExpectation *QueryHandlerMockHandleQueryExpectation
	expectations       []*QueryHandlerMockHandleQueryExpectation

	callArgs []*QueryHandlerMockHandleQueryParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// QueryHandlerMockHandleQueryExpectation specifies expectation struct of the QueryHandler.HandleQuery
type QueryHandlerMockHandleQueryExpectation struct {
	mock               *QueryHandlerMock
	params             *QueryHandlerMockHandleQueryParams
	paramPtrs          *QueryHandlerMockHandleQueryParamPtrs
	expectationOrigins QueryHandlerMockHandleQueryExpectationOrigins
	results            *QueryHandlerMockHandleQueryResults
	returnOrigin       string
	Counter            uint64
}

// QueryHandlerMockHandleQueryParams contains parameters of the QueryHandler.HandleQuery
type QueryHandlerMockHandleQueryParams struct {
	ctx context.Context
	q   mm_get_reminder_by_id_query.Query
}

// QueryHandlerMockHandleQueryParamPtrs contains pointers to parameters of the QueryHandler.HandleQuery
type QueryHandlerMockHandleQueryParamPtrs struct {
	ctx *context.Context
	q   *mm_get_reminder_by_id_query.Query
}

// QueryHandlerMockHandleQueryResults contains results of the QueryHandler.HandleQuery
type QueryHandlerMockHandleQueryResults struct {
	r1  reminder_aggregate.Reminder
	err error
}

// QueryHandlerMockHandleQueryOrigins contains origins of expectations of the QueryHandler.HandleQuery
type QueryHandlerMockHandleQueryExpectationOrigins struct {
	origin    string
	originCtx string
	originQ   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Optional() *mQueryHandlerMockHandleQuery {
	mmHandleQuery.optional = true
	return mmHandleQuery
}

// Expect sets up expected params for QueryHandler.HandleQuery
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Expect(ctx context.Context, q mm_get_reminder_by_id_query.Query) *mQueryHandlerMockHandleQuery {
	if mmHandleQuery.mock.funcHandleQuery != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Set")
	}

	if mmHandleQuery.defaultExpectation == nil {
		mmHandleQuery.defaultExpectation = &QueryHandlerMockHandleQueryExpectation{}
	}

	if mmHandleQuery.defaultExpectation.paramPtrs != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by ExpectParams functions")
	}

	mmHandleQuery.defaultExpectation.params = &QueryHandlerMockHandleQueryParams{ctx, q}
	mmHandleQuery.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHandleQuery.expectations {
		if minimock.Equal(e.params, mmHandleQuery.defaultExpectation.params) {
			mmHandleQuery.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHandleQuery.defaultExpectation.params)
		}
	}

	return mmHandleQuery
}

// ExpectCtxParam1 sets up expected param ctx for QueryHandler.HandleQuery
func (mmHandleQuery *mQueryHandlerMockHandleQuery) ExpectCtxParam1(ctx context.Context) *mQueryHandlerMockHandleQuery {
	if mmHandleQuery.mock.funcHandleQuery != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Set")
	}

	if mmHandleQuery.defaultExpectation == nil {
		mmHandleQuery.defaultExpectation = &QueryHandlerMockHandleQueryExpectation{}
	}

	if mmHandleQuery.defaultExpectation.params != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Expect")
	}

	if mmHandleQuery.defaultExpectation.paramPtrs == nil {
		mmHandleQuery.defaultExpectation.paramPtrs = &QueryHandlerMockHandleQueryParamPtrs{}
	}
	mmHandleQuery.defaultExpectation.paramPtrs.ctx = &ctx
	mmHandleQuery.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmHandleQuery
}

// ExpectQParam2 sets up expected param q for QueryHandler.HandleQuery
func (mmHandleQuery *mQueryHandlerMockHandleQuery) ExpectQParam2(q mm_get_reminder_by_id_query.Query) *mQueryHandlerMockHandleQuery {
	if mmHandleQuery.mock.funcHandleQuery != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Set")
	}

	if mmHandleQuery.defaultExpectation == nil {
		mmHandleQuery.defaultExpectation = &QueryHandlerMockHandleQueryExpectation{}
	}

	if mmHandleQuery.defaultExpectation.params != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Expect")
	}

	if mmHandleQuery.defaultExpectation.paramPtrs == nil {
		mmHandleQuery.defaultExpectation.paramPtrs = &QueryHandlerMockHandleQueryParamPtrs{}
	}
	mmHandleQuery.defaultExpectation.paramPtrs.q = &q
	mmHandleQuery.defaultExpectation.expectationOrigins.originQ = minimock.CallerInfo(1)

	return mmHandleQuery
}

// Inspect accepts an inspector function that has same arguments as the QueryHandler.HandleQuery
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Inspect(f func(ctx context.Context, q mm_get_reminder_by_id_query.Query)) *mQueryHandlerMockHandleQuery {
	if mmHandleQuery.mock.inspectFuncHandleQuery != nil {
		mmHandleQuery.mock.t.Fatalf("Inspect function is already set for QueryHandlerMock.HandleQuery")
	}

	mmHandleQuery.mock.inspectFuncHandleQuery = f

	return mmHandleQuery
}

// Return sets up results that will be returned by QueryHandler.HandleQuery
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Return(r1 reminder_aggregate.Reminder, err error) *QueryHandlerMock {
	if mmHandleQuery.mock.funcHandleQuery != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Set")
	}

	if mmHandleQuery.defaultExpectation == nil {
		mmHandleQuery.defaultExpectation = &QueryHandlerMockHandleQueryExpectation{mock: mmHandleQuery.mock}
	}
	mmHandleQuery.defaultExpectation.results = &QueryHandlerMockHandleQueryResults{r1, err}
	mmHandleQuery.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHandleQuery.mock
}

// Set uses given function f to mock the QueryHandler.HandleQuery method
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Set(f func(ctx context.Context, q mm_get_reminder_by_id_query.Query) (r1 reminder_aggregate.Reminder, err error)) *QueryHandlerMock {
	if mmHandleQuery.defaultExpectation != nil {
		mmHandleQuery.mock.t.Fatalf("Default expectation is already set for the QueryHandler.HandleQuery method")
	}

	if len(mmHandleQuery.expectations) > 0 {
		mmHandleQuery.mock.t.Fatalf("Some expectations are already set for the QueryHandler.HandleQuery method")
	}

	mmHandleQuery.mock.funcHandleQuery = f
	mmHandleQuery.mock.funcHandleQueryOrigin = minimock.CallerInfo(1)
	return mmHandleQuery.mock
}

// When sets expectation for the QueryHandler.HandleQuery which will trigger the result defined by the following
// Then helper
func (mmHandleQuery *mQueryHandlerMockHandleQuery) When(ctx context.Context, q mm_get_reminder_by_id_query.Query) *QueryHandlerMockHandleQueryExpectation {
	if mmHandleQuery.mock.funcHandleQuery != nil {
		mmHandleQuery.mock.t.Fatalf("QueryHandlerMock.HandleQuery mock is already set by Set")
	}

	expectation := &QueryHandlerMockHandleQueryExpectation{
		mock:               mmHandleQuery.mock,
		params:             &QueryHandlerMockHandleQueryParams{ctx, q},
		expectationOrigins: QueryHandlerMockHandleQueryExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHandleQuery.expectations = append(mmHandleQuery.expectations, expectation)
	return expectation
}

// Then sets up QueryHandler.HandleQuery return parameters for the expectation previously defined by the When method
func (e *QueryHandlerMockHandleQueryExpectation) Then(r1 reminder_aggregate.Reminder, err error) *QueryHandlerMock {
	e.results = &QueryHandlerMockHandleQueryResults{r1, err}
	return e.mock
}

// Times sets number of times QueryHandler.HandleQuery should be invoked
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Times(n uint64) *mQueryHandlerMockHandleQuery {
	if n == 0 {
		mmHandleQuery.mock.t.Fatalf("Times of QueryHandlerMock.HandleQuery mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHandleQuery.expectedInvocations, n)
	mmHandleQuery.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHandleQuery
}

func (mmHandleQuery *mQueryHandlerMockHandleQuery) invocationsDone() bool {
	if len(mmHandleQuery.expectations) == 0 && mmHandleQuery.defaultExpectation == nil && mmHandleQuery.mock.funcHandleQuery == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHandleQuery.mock.afterHandleQueryCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHandleQuery.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// HandleQuery implements mm_get_reminder_by_id_query.QueryHandler
func (mmHandleQuery *QueryHandlerMock) HandleQuery(ctx context.Context, q mm_get_reminder_by_id_query.Query) (r1 reminder_aggregate.Reminder, err error) {
	mm_atomic.AddUint64(&mmHandleQuery.beforeHandleQueryCounter, 1)
	defer mm_atomic.AddUint64(&mmHandleQuery.afterHandleQueryCounter, 1)

	mmHandleQuery.t.Helper()

	if mmHandleQuery.inspectFuncHandleQuery != nil {
		mmHandleQuery.inspectFuncHandleQuery(ctx, q)
	}

	mm_params := QueryHandlerMockHandleQueryParams{ctx, q}

	// Record call args
	mmHandleQuery.HandleQueryMock.mutex.Lock()
	mmHandleQuery.HandleQueryMock.callArgs = append(mmHandleQuery.HandleQueryMock.callArgs, &mm_params)
	mmHandleQuery.HandleQueryMock.mutex.Unlock()

	for _, e := range mmHandleQuery.HandleQueryMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmHandleQuery.HandleQueryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHandleQuery.HandleQueryMock.defaultExpectation.Counter, 1)
		mm_want := mmHandleQuery.HandleQueryMock.defaultExpectation.params
		mm_want_ptrs := mmHandleQuery.HandleQueryMock.defaultExpectation.paramPtrs

		mm_got := QueryHandlerMockHandleQueryParams{ctx, q}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmHandleQuery.t.Errorf("QueryHandlerMock.HandleQuery got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHandleQuery.HandleQueryMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.q != nil && !minimock.Equal(*mm_want_ptrs.q, mm_got.q) {
				mmHandleQuery.t.Errorf("QueryHandlerMock.HandleQuery got unexpected parameter q, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHandleQuery.HandleQueryMock.defaultExpectation.expectationOrigins.originQ, *mm_want_ptrs.q, mm_got.q, minimock.Diff(*mm_want_ptrs.q, mm_got.q))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHandleQuery.t.Errorf("QueryHandlerMock.HandleQuery got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHandleQuery.HandleQueryMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHandleQuery.HandleQueryMock.defaultExpectation.results
		if mm_results == nil {
			mmHandleQuery.t.Fatal("No results are set for the QueryHandlerMock.HandleQuery")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmHandleQuery.funcHandleQuery != nil {
		return mmHandleQuery.funcHandleQuery(ctx, q)
	}
	mmHandleQuery.t.Fatalf("Unexpected call to QueryHandlerMock.HandleQuery. %v %v", ctx, q)
	return
}

// HandleQueryAfterCounter returns a count of finished QueryHandlerMock.HandleQuery invocations
func (mmHandleQuery *QueryHandlerMock) HandleQueryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleQuery.afterHandleQueryCounter)
}

// HandleQueryBeforeCounter returns a count of QueryHandlerMock.HandleQuery invocations
func (mmHandleQuery *QueryHandlerMock) HandleQueryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleQuery.beforeHandleQueryCounter)
}

// Calls returns a list of arguments used in each call to QueryHandlerMock.HandleQuery.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHandleQuery *mQueryHandlerMockHandleQuery) Calls() []*QueryHandlerMockHandleQueryParams {
	mmHandleQuery.mutex.RLock()

	argCopy := make([]*QueryHandlerMockHandleQueryParams, len(mmHandleQuery.callArgs))
	copy(argCopy, mmHandleQuery.callArgs)

	mmHandleQuery.mutex.RUnlock()

	return argCopy
}

// MinimockHandleQueryDone returns true if the count of the HandleQuery invocations corresponds
// the number of defined expectations
func (m *QueryHandlerMock) MinimockHandleQueryDone() bool {
	if m.HandleQueryMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HandleQueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HandleQueryMock.invocationsDone()
}

// MinimockHandleQueryInspect logs each unmet expectation
func (m *QueryHandlerMock) MinimockHandleQueryInspect() {
	for _, e := range m.HandleQueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueryHandlerMock.HandleQuery at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHandleQueryCounter := mm_atomic.LoadUint64(&m.afterHandleQueryCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HandleQueryMock.defaultExpectation != nil && afterHandleQueryCounter < 1 {
		if m.HandleQueryMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to QueryHandlerMock.HandleQuery at\n%s", m.HandleQueryMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to QueryHandlerMock.HandleQuery at\n%s with params: %#v", m.HandleQueryMock.defaultExpectation.expectationOrigins.origin, *m.HandleQueryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleQuery != nil && afterHandleQueryCounter < 1 {
		m.t.Errorf("Expected call to QueryHandlerMock.HandleQuery at\n%s", m.funcHandleQueryOrigin)
	}

	if !m.HandleQueryMock.invocationsDone() && afterHandleQueryCounter > 0 {
		m.t.Errorf("Expected %d calls to QueryHandlerMock.HandleQuery at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HandleQueryMock.expectedInvocations), m.HandleQueryMock.expectedInvocationsOrigin, afterHandleQueryCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *QueryHandlerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockHandleQueryInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *QueryHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *QueryHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHandleQueryDone()
}
